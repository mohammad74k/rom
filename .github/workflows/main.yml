name: Build ROM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: تنظیم فضای Swap
        run: |
          set -e
          sudo swapoff -a || true
          sudo rm -f /swapfile || true
          if ! swapon -s | grep -q '/swapfile'; then
            sudo fallocate -l 8G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=8192
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            free -h
          fi

      - name: افزودن مخزن Universe
        run: |
          sudo add-apt-repository -y universe
          sudo apt update

      - name: پاکسازی و بروزرسانی APT
        run: |
          sudo apt clean
          sudo rm -rf /var/lib/apt/lists/*
          for i in {1..3}; do sudo apt update && break || sleep 10; done
          sudo apt upgrade -y || true

      - name: حل مشکلات dpkg
        run: |
          sudo dpkg --configure -a || true
          sudo apt install -f -y || true

      - name: نصب ابزارهای اصلی
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
              openjdk-17-jdk repo git-core gnupg flex bison gperf build-essential \
              zlib1g-dev libc6-dev libncurses5-dev x11proto-core-dev libx11-dev \
              libgl1-mesa-dev libxml2-utils xsltproc unzip python3 python3-pip \
              android-sdk-libsparse-utils wget ccache lz4

      - name: نصب mkbootimg
        run: |
          if ! sudo apt install -y android-tools-mkbootimg; then
            curl -LO https://github.com/chenxiaolong/android_device_xiaomi_msm8916-common/raw/master/tools/mkbootimg/mkbootimg
            chmod +x mkbootimg
            sudo mv mkbootimg /usr/local/bin/
          fi

      - name: نصب ابزارهای جانبی
        run: |
          sudo apt install -y f2fs-tools squashfs-tools

  build:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 480

    steps:
      - name: دانلود و استخراج هوشمند ROM
        run: |
          mkdir -p custom_rom
          cd custom_rom

          # تعریف نام فایل و URL
          ZIP_FILE="evolution_chopin-ota-tq3c.230901.001.b1-04040628-community-unsigned.zip"
          ZIP_URL="https://mirrors.ilolicon.com/ROM/evolution_chopin-ota-tq3c.230901.001.b1-04040628-community-unsigned/evolution_chopin-ota-tq3c.230901.001.b1-04040628-community-unsigned.zip"

          # بررسی وجود فایل ZIP
          if [ ! -f "$ZIP_FILE" ]; then
            echo "فایل ZIP یافت نشد. در حال دانلود..."
            wget --progress=dot -O "$ZIP_FILE" "$ZIP_URL"
          fi

          # بررسی صحت فایل ZIP
          echo "بررسی صحت فایل ZIP..."
          if ! unzip -t "$ZIP_FILE"; then
            echo "❌ فایل ZIP خراب است. در حال دانلود مجدد..."
            rm -f "$ZIP_FILE"
            wget --progress=dot -O "$ZIP_FILE" "$ZIP_URL"

            # بررسی مجدد صحت فایل ZIP
            if ! unzip -t "$ZIP_FILE"; then
              echo "❌ فایل ZIP همچنان خراب است. لطفاً به صورت دستی بررسی کنید."
              exit 1
            fi
          fi

          # استخراج فایل ZIP
          echo "استخراج فایل ZIP..."
          unzip -q "$ZIP_FILE" -d .
          echo "✅ فایل ZIP با موفقیت استخراج شد."
          echo "فایل‌های استخراج شده:"
          ls -R

      - name: استخراج فایل‌های vendor و device tree با update_payload
        run: |
          cd custom_rom

          # نصب update_payload
          echo "نصب update_payload..."
          git clone https://github.com/anestisb/android-tools.git
          cd android-tools
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install

          # استخراج فایل‌ها از payload.bin
          echo "استخراج فایل‌ها از payload.bin..."
          payload_file=$(find .. -name "payload.bin" -print -quit)
          if [ -z "$payload_file" ]; then
            echo "❌ payload.bin پیدا نشد!"
            exit 1
          else
            echo "✅ payload.bin پیدا شد: $payload_file"
            mkdir -p ../../extracted_payload
            update_payload extract "$payload_file" --output_dir ../../extracted_payload
          fi

          echo "✅ فایل‌های استخراج شده از payload.bin:"
          ls -R ../../extracted_payload

      - name: آماده‌سازی فایل‌های منبع
        run: |
          mkdir -p android_source/device/xiaomi/chopin/vendor
          cp -r extracted_payload/vendor/* android_source/device/xiaomi/chopin/vendor/
          cp -r extracted_payload/device/* android_source/device/xiaomi/chopin/

      - name: دانلود سورس اندروید
        run: |
          cd android_source
          repo init -u https://github.com/PixelOS-AOSP/platform_manifest.git -b pixel-14.0
          repo sync -q -j$(nproc)

      - name: کامپایل ریکاوری
        run: |
          cd android_source
          source build/envsetup.sh
          lunch aosp_chopin-userdebug
          make recoveryimage -j$(nproc) > /dev/null 2>&1

      - name: کامپایل ROM
        run: |
          cd android_source
          make -j$(nproc) > /dev/null 2>&1

      - name: بررسی فایل‌های خروجی
        run: |
          if [ ! -f android_source/out/target/product/chopin/*.zip ] || [ ! -f android_source/out/target/product/chopin/recovery.img ]; then
            echo "❌ فایل‌های خروجی (ROM یا recovery.img) ساخته نشدند!"
            exit 1
          else
            echo "✅ فایل‌های خروجی با موفقیت ساخته شدند."
          fi

      - name: آپلود آرتیفکت
        uses: actions/upload-artifact@v4
        with:
          name: Custom-ROM
          path: |
            android_source/out/target/product/chopin/*.zip
            android_source/out/target/product/chopin/recovery.img

      - name: پاکسازی فایل‌های موقت
        run: |
          rm -rf custom_rom extracted_payload
