name: Build PixelOS ROM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 240

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: تنظیم فضای Swap
        run: |
          set -e
          sudo swapoff -a || true
          sudo rm -f /swapfile || true
          if ! swapon -s | grep -q '/swapfile'; then
            sudo fallocate -l 8G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=8192
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            free -h
          fi

      - name: افزودن مخزن Universe
        run: |
          sudo add-apt-repository -y universe
          sudo apt update

      - name: پاکسازی و بروزرسانی APT
        run: |
          sudo apt clean
          sudo rm -rf /var/lib/apt/lists/*
          for i in {1..3}; do sudo apt update && break || sleep 10; done
          sudo apt upgrade -y || true

      - name: حل مشکلات dpkg
        run: |
          sudo dpkg --configure -a || true
          sudo apt install -f -y || true

      - name: نصب ابزارهای اصلی
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
              openjdk-17-jdk repo git-core gnupg flex bison gperf build-essential \
              zlib1g-dev libc6-dev libncurses5-dev x11proto-core-dev libx11-dev \
              libgl1-mesa-dev libxml2-utils xsltproc unzip python3 python3-pip \
              android-sdk-libsparse-utils wget ccache lz4 golang curl

      - name: نصب mkbootimg
        run: |
          if ! sudo apt install -y android-tools-mkbootimg; then
            curl -LO https://github.com/chenxiaolong/android_device_xiaomi_msm8916-common/raw/master/tools/mkbootimg/mkbootimg
            chmod +x mkbootimg
            sudo mv mkbootimg /usr/local/bin/
          fi

      - name: نصب ابزارهای جانبی
        run: |
          sudo apt install -y f2fs-tools squashfs-tools liblzma-dev

  build:
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 480

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: پاکسازی فایل‌های موقت
        run: |
          sudo apt clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/*

      - name: دانلود و استخراج هوشمند ROM
        run: |
          mkdir -p custom_rom
          cd custom_rom
          # تعریف نام فایل و URL
          ZIP_FILE="evolution_chopin-ota-tq3c.230901.001.b1-04040628-community-unsigned.zip"
          ZIP_URL="https://mirrors.ilolicon.com/ROM/evolution_chopin-ota-tq3c.230901.001.b1-04040628-community-unsigned/evolution_chopin-ota-tq3c.230901.001.b1-04040628-community-unsigned.zip"
          
          # بررسی وجود فایل ZIP
          if [ ! -f "$ZIP_FILE" ]; then
            echo "فایل ZIP یافت نشد. در حال دانلود..."
            wget --progress=dot -O "$ZIP_FILE" "$ZIP_URL"
          fi
          
          # بررسی صحت فایل ZIP
          echo "بررسی صحت فایل ZIP..."
          if ! unzip -t "$ZIP_FILE"; then
            echo "❌ فایل ZIP خراب است. در حال دانلود مجدد..."
            rm -f "$ZIP_FILE"
            wget --progress=dot -O "$ZIP_FILE" "$ZIP_URL"
            if ! unzip -t "$ZIP_FILE"; then
              echo "❌ فایل ZIP همچنان خراب است. لطفاً به صورت دستی بررسی کنید."
              exit 1
            fi
          fi
          
          # استخراج فایل ZIP
          echo "استخراج فایل ZIP..."
          unzip -q "$ZIP_FILE" -d .
          echo "✅ فایل ZIP با موفقیت استخراج شد."

      - name: نصب liblzma-dev
        run: |
          sudo apt update
          sudo apt install -y liblzma-dev

      - name: نصب payload-dumper-go
        run: |
          if ! command -v payload-dumper-go &>/dev/null; then
            echo "❌ payload-dumper-go یافت نشد. در حال نصب..."
            sudo apt install -y liblzma-dev
            git clone https://github.com/ssut/payload-dumper-go.git
            cd payload-dumper-go
            go build -o payload-dumper-go
            sudo mv payload-dumper-go /usr/local/bin/
            cd ..
          fi

      - name: استخراج فایل‌های vendor و device tree
        run: |
          cd custom_rom
          payload_file=$(find . -name "payload.bin" -print -quit)
          if [ -z "$payload_file" ]; then
            echo "❌ فایل payload.bin یافت نشد!"
            exit 1
          fi
          mkdir -p extracted_payload
          if payload-dumper-go -o extracted_payload "$payload_file"; then
            echo "✅ استخراج با موفقیت انجام شد!"
          else
            echo "❌ استخراج با payload-dumper-go ناموفق بود! در حال استفاده از payload_dumper.py..."
            wget https://github.com/cyxx/extract_android_ota_payload/raw/master/payload_dumper.py
            pip3 install protobuf bsdiff4
            python3 payload_dumper.py "$payload_file" -o extracted_payload
          fi
          echo "✅ فایل‌های استخراج شده:"
          ls -lh extracted_payload

      - name: کپی فایل‌های vendor به مسیر صحیح
        run: |
          mkdir -p android_source/device/xiaomi/chopin/vendor
          if [ -f "custom_rom/extracted_payload/vendor.img" ]; then
              cp custom_rom/extracted_payload/vendor.img android_source/device/xiaomi/chopin/vendor/
          else
              echo "❌ فایل vendor.img در مسیر مورد نظر وجود ندارد!"
              exit 1
          fi

      - name: تنظیم کلید SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: تست دسترسی SSH
        id: ssh_test
        run: |
          if ssh -T git@github.com; then
            echo "SSH connection successful."
            echo "USE_SSH=true" >> $GITHUB_ENV
          else
            echo "SSH connection failed. Falling back to HTTPS with tokens."
            echo "USE_SSH=false" >> $GITHUB_ENV
          fi

      - name: تنظیم توکن GitHub (در صورت شکست SSH)
        if: env.USE_SSH == 'false'
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN_CLASSIC }}:@github.com/".insteadOf "https://github.com/"

      - name: نصب و استفاده از ابزار repo
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          export PATH="$HOME/bin:$PATH"
          
          # تنظیم هویت Git (ضروری برای repo sync)
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # ایجاد دایرکتوری android_source
          mkdir -p android_source
          cd android_source
          
          # اجرای repo init
          repo init -u https://github.com/PixelOS-AOSP/manifest.git -b fourteen --git-lfs
          
          # همگام‌سازی مخزن (بدون --depth)
          repo sync -q -j$(nproc) --no-clone-bundle --force-sync

      - name: کامپایل ریکاوری
        run: |
          cd android_source
          source build/envsetup.sh
          lunch aosp_chopin-userdebug
          make recoveryimage -j$(nproc) >/dev/null 2>&1

      - name: کامپایل ROM
        run: |
          cd android_source
          make -j$(nproc) >/dev/null 2>&1

      - name: بررسی نهایی
        run: |
          if [ ! -f android_source/out/target/product/chopin/*.zip ] || \
             [ ! -f android_source/out/target/product/chopin/recovery.img ]; then
            echo "❌ خطا در تولید خروجی!"
            exit 1
          fi
          echo "✅ ساخت ROM با موفقیت انجام شد!"

      - name: آپلود نتایج
        uses: actions/upload-artifact@v4
        with:
          name: ROM-Artifacts
          path: |
            android_source/out/target/product/chopin/*.zip
            android_source/out/target/product/chopin/recovery.img

      - name: پاکسازی
        run: |
          rm -rf custom_rom extracted_payload
          sudo swapoff -a
          sudo rm -f /swapfile
